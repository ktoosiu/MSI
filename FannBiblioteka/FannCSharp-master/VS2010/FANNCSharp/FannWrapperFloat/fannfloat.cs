//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

using FANNCSharp;
namespace FannWrapperFloat {

internal class fannfloat {
  public static SWIGTYPE_p_FILE fopen(string filename, string mode) {
    global::System.IntPtr cPtr = fannfloatPINVOKE.fopen(filename, mode);
    SWIGTYPE_p_FILE ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FILE(cPtr, false);
    return ret;
  }

  public static int fclose(SWIGTYPE_p_FILE stream) {
    int ret = fannfloatPINVOKE.fclose(SWIGTYPE_p_FILE.getCPtr(stream));
    return ret;
  }

  public static float train_epoch_batch_parallel(SWIGTYPE_p_fann ann, SWIGTYPE_p_fann_train_data data, uint threadnumb) {
    float ret = fannfloatPINVOKE.train_epoch_batch_parallel__SWIG_0(SWIGTYPE_p_fann.getCPtr(ann), SWIGTYPE_p_fann_train_data.getCPtr(data), threadnumb);
    return ret;
  }

  public static float train_epoch_irpropm_parallel(SWIGTYPE_p_fann ann, SWIGTYPE_p_fann_train_data data, uint threadnumb) {
    float ret = fannfloatPINVOKE.train_epoch_irpropm_parallel__SWIG_0(SWIGTYPE_p_fann.getCPtr(ann), SWIGTYPE_p_fann_train_data.getCPtr(data), threadnumb);
    return ret;
  }

  public static float train_epoch_quickprop_parallel(SWIGTYPE_p_fann ann, SWIGTYPE_p_fann_train_data data, uint threadnumb) {
    float ret = fannfloatPINVOKE.train_epoch_quickprop_parallel__SWIG_0(SWIGTYPE_p_fann.getCPtr(ann), SWIGTYPE_p_fann_train_data.getCPtr(data), threadnumb);
    return ret;
  }

  public static float train_epoch_sarprop_parallel(SWIGTYPE_p_fann ann, SWIGTYPE_p_fann_train_data data, uint threadnumb) {
    float ret = fannfloatPINVOKE.train_epoch_sarprop_parallel__SWIG_0(SWIGTYPE_p_fann.getCPtr(ann), SWIGTYPE_p_fann_train_data.getCPtr(data), threadnumb);
    return ret;
  }

  public static float train_epoch_incremental_mod(SWIGTYPE_p_fann ann, SWIGTYPE_p_fann_train_data data) {
    float ret = fannfloatPINVOKE.train_epoch_incremental_mod__SWIG_0(SWIGTYPE_p_fann.getCPtr(ann), SWIGTYPE_p_fann_train_data.getCPtr(data));
    return ret;
  }

  public static float train_epoch_batch_parallel(SWIGTYPE_p_fann ann, SWIGTYPE_p_fann_train_data data, uint threadnumb, floatVectorVector predicted_outputs) {
    float ret = fannfloatPINVOKE.train_epoch_batch_parallel__SWIG_1(SWIGTYPE_p_fann.getCPtr(ann), SWIGTYPE_p_fann_train_data.getCPtr(data), threadnumb, floatVectorVector.getCPtr(predicted_outputs));
    if (fannfloatPINVOKE.SWIGPendingException.Pending) throw fannfloatPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float train_epoch_irpropm_parallel(SWIGTYPE_p_fann ann, SWIGTYPE_p_fann_train_data data, uint threadnumb, floatVectorVector predicted_outputs) {
    float ret = fannfloatPINVOKE.train_epoch_irpropm_parallel__SWIG_1(SWIGTYPE_p_fann.getCPtr(ann), SWIGTYPE_p_fann_train_data.getCPtr(data), threadnumb, floatVectorVector.getCPtr(predicted_outputs));
    if (fannfloatPINVOKE.SWIGPendingException.Pending) throw fannfloatPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float train_epoch_quickprop_parallel(SWIGTYPE_p_fann ann, SWIGTYPE_p_fann_train_data data, uint threadnumb, floatVectorVector predicted_outputs) {
    float ret = fannfloatPINVOKE.train_epoch_quickprop_parallel__SWIG_1(SWIGTYPE_p_fann.getCPtr(ann), SWIGTYPE_p_fann_train_data.getCPtr(data), threadnumb, floatVectorVector.getCPtr(predicted_outputs));
    if (fannfloatPINVOKE.SWIGPendingException.Pending) throw fannfloatPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float train_epoch_sarprop_parallel(SWIGTYPE_p_fann ann, SWIGTYPE_p_fann_train_data data, uint threadnumb, floatVectorVector predicted_outputs) {
    float ret = fannfloatPINVOKE.train_epoch_sarprop_parallel__SWIG_1(SWIGTYPE_p_fann.getCPtr(ann), SWIGTYPE_p_fann_train_data.getCPtr(data), threadnumb, floatVectorVector.getCPtr(predicted_outputs));
    if (fannfloatPINVOKE.SWIGPendingException.Pending) throw fannfloatPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float train_epoch_incremental_mod(SWIGTYPE_p_fann ann, SWIGTYPE_p_fann_train_data data, floatVectorVector predicted_outputs) {
    float ret = fannfloatPINVOKE.train_epoch_incremental_mod__SWIG_1(SWIGTYPE_p_fann.getCPtr(ann), SWIGTYPE_p_fann_train_data.getCPtr(data), floatVectorVector.getCPtr(predicted_outputs));
    if (fannfloatPINVOKE.SWIGPendingException.Pending) throw fannfloatPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float test_data_parallel(SWIGTYPE_p_fann ann, SWIGTYPE_p_fann_train_data data, uint threadnumb) {
    float ret = fannfloatPINVOKE.test_data_parallel__SWIG_0(SWIGTYPE_p_fann.getCPtr(ann), SWIGTYPE_p_fann_train_data.getCPtr(data), threadnumb);
    return ret;
  }

  public static float test_data_parallel(SWIGTYPE_p_fann ann, SWIGTYPE_p_fann_train_data data, uint threadnumb, floatVectorVector predicted_outputs) {
    float ret = fannfloatPINVOKE.test_data_parallel__SWIG_1(SWIGTYPE_p_fann.getCPtr(ann), SWIGTYPE_p_fann_train_data.getCPtr(data), threadnumb, floatVectorVector.getCPtr(predicted_outputs));
    if (fannfloatPINVOKE.SWIGPendingException.Pending) throw fannfloatPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
