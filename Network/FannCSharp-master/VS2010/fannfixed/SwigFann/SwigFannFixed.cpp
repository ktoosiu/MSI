/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_fannfixed(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_fannfixed(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_fannfixed(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include "fann.h"
#include "fann_cpp.h"
#include "fann_data.h"
#include "fann_train.h"
#include "fann_data_cpp.h"
#include "fann_training_data_cpp.h"
#include "stdio.h"


#include <string>


typedef enum FANN::activation_function_enum ActivationFunction;
typedef enum error_function_enum ErrorFunction;
typedef enum network_type_enum NetworkType;
typedef enum stop_function_enum StopFunction;
typedef enum training_algorithm_enum TrainingAlgorithm;


typedef unsigned int uintArray;

SWIGINTERN uintArray *new_uintArray(int nelements){
  return new unsigned int[nelements]();
}
SWIGINTERN void delete_uintArray(uintArray *self){
  delete [] self;
}
SWIGINTERN unsigned int uintArray_getitem(uintArray *self,int index){
  return self[index];
}
SWIGINTERN void uintArray_setitem(uintArray *self,int index,unsigned int value){
  self[index] = value;
}
SWIGINTERN unsigned int *uintArray_cast(uintArray *self){
  return self;
}
SWIGINTERN uintArray *uintArray_frompointer(unsigned int *t){
  return (uintArray *) t;
}

typedef ActivationFunction ActivationFunctionArray;

SWIGINTERN ActivationFunctionArray *new_ActivationFunctionArray(int nelements){
  return new ActivationFunction[nelements]();
}
SWIGINTERN void delete_ActivationFunctionArray(ActivationFunctionArray *self){
  delete [] self;
}
SWIGINTERN ActivationFunction ActivationFunctionArray_getitem(ActivationFunctionArray *self,int index){
  return self[index];
}
SWIGINTERN void ActivationFunctionArray_setitem(ActivationFunctionArray *self,int index,ActivationFunction value){
  self[index] = value;
}
SWIGINTERN ActivationFunction *ActivationFunctionArray_cast(ActivationFunctionArray *self){
  return self;
}
SWIGINTERN ActivationFunctionArray *ActivationFunctionArray_frompointer(ActivationFunction *t){
  return (ActivationFunctionArray *) t;
}

typedef fann_connection ConnectionArray;

SWIGINTERN ConnectionArray *new_ConnectionArray(int nelements){
  return new fann_connection[nelements]();
}
SWIGINTERN void delete_ConnectionArray(ConnectionArray *self){
  delete [] self;
}
SWIGINTERN fann_connection ConnectionArray_getitem(ConnectionArray *self,int index){
  return self[index];
}
SWIGINTERN void ConnectionArray_setitem(ConnectionArray *self,int index,fann_connection value){
  self[index] = value;
}
SWIGINTERN fann_connection *ConnectionArray_cast(ConnectionArray *self){
  return self;
}
SWIGINTERN ConnectionArray *ConnectionArray_frompointer(fann_connection *t){
  return (ConnectionArray *) t;
}

	typedef int* int_ptr;
    typedef int fann_type;


typedef int intArray;

SWIGINTERN intArray *new_intArray(int nelements){
  return new int[nelements]();
}
SWIGINTERN void delete_intArray(intArray *self){
  delete [] self;
}
SWIGINTERN int intArray_getitem(intArray *self,int index){
  return self[index];
}
SWIGINTERN void intArray_setitem(intArray *self,int index,int value){
  self[index] = value;
}
SWIGINTERN int *intArray_cast(intArray *self){
  return self;
}
SWIGINTERN intArray *intArray_frompointer(int *t){
  return (intArray *) t;
}

typedef int_ptr intArrayArray;

SWIGINTERN intArrayArray *new_intArrayArray(int nelements){
  return new int_ptr[nelements]();
}
SWIGINTERN void delete_intArrayArray(intArrayArray *self){
  delete [] self;
}
SWIGINTERN int_ptr intArrayArray_getitem(intArrayArray *self,int index){
  return self[index];
}
SWIGINTERN void intArrayArray_setitem(intArrayArray *self,int index,int_ptr value){
  self[index] = value;
}
SWIGINTERN int_ptr *intArrayArray_cast(intArrayArray *self){
  return self;
}
SWIGINTERN intArrayArray *intArrayArray_frompointer(int_ptr *t){
  return (intArrayArray *) t;
}

struct _IntArrayAccessor;
typedef struct _IntAccessor{
    friend _IntArrayAccessor;
private:
    int *array;
public:
    int Get(int index) {
      return array[index];
    }
    static _IntAccessor *FromPointer(int *t) {
#ifdef __cplusplus
      _IntAccessor * newStruct = new _IntAccessor();
#else
      _IntAccessor * newStruct = (_IntAccessor *) calloc(1, sizeof(_IntAccessor));
#endif
      newStruct->array = t;
      return newStruct;
    }
    int* Cast() {
        return array;
    }
} IntAccessor;



typedef struct _IntArrayAccessor{
private:
    int **array;
public:
    _IntAccessor* Get(int index) {
      return _IntAccessor::FromPointer(array[index]);
    }
    int Get(int x, int y) {
      return array[x][y];
    }
    static _IntArrayAccessor *FromPointer(int **t) {
#ifdef __cplusplus
      _IntArrayAccessor * newStruct = new _IntArrayAccessor();
#else
      _IntArrayAccessor * newStruct = (_IntArrayAccessor *) calloc(1, sizeof(_IntArrayAccessor));
#endif
      newStruct->array = t;
      return newStruct;
    }
    int** Cast() {
        return array;
    }
} IntArrayAccessor;



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT char * SWIGSTDCALL CSharp_FANNPRINTF_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("%d");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FANNSCANF_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("%d");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_fopen(char * jarg1, char * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  FILE *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (FILE *)fopen((char const *)arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_fclose(void * jarg1) {
  int jresult ;
  FILE *arg1 = (FILE *) 0 ;
  int result;
  
  arg1 = (FILE *)jarg1; 
  result = (int)fclose(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_uintArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  uintArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (uintArray *)new_uintArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_uintArray(void * jarg1) {
  uintArray *arg1 = (uintArray *) 0 ;
  
  arg1 = (uintArray *)jarg1; 
  delete_uintArray(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_uintArray_getitem(void * jarg1, int jarg2) {
  unsigned int jresult ;
  uintArray *arg1 = (uintArray *) 0 ;
  int arg2 ;
  unsigned int result;
  
  arg1 = (uintArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned int)uintArray_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_uintArray_setitem(void * jarg1, int jarg2, unsigned int jarg3) {
  uintArray *arg1 = (uintArray *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (uintArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  uintArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_uintArray_cast(void * jarg1) {
  void * jresult ;
  uintArray *arg1 = (uintArray *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (uintArray *)jarg1; 
  result = (unsigned int *)uintArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_uintArray_frompointer(void * jarg1) {
  void * jresult ;
  unsigned int *arg1 = (unsigned int *) 0 ;
  uintArray *result = 0 ;
  
  arg1 = (unsigned int *)jarg1; 
  result = (uintArray *)uintArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ActivationFunctionArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  ActivationFunctionArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (ActivationFunctionArray *)new_ActivationFunctionArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ActivationFunctionArray(void * jarg1) {
  ActivationFunctionArray *arg1 = (ActivationFunctionArray *) 0 ;
  
  arg1 = (ActivationFunctionArray *)jarg1; 
  delete_ActivationFunctionArray(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ActivationFunctionArray_getitem(void * jarg1, int jarg2) {
  int jresult ;
  ActivationFunctionArray *arg1 = (ActivationFunctionArray *) 0 ;
  int arg2 ;
  ActivationFunction result;
  
  arg1 = (ActivationFunctionArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ActivationFunction)ActivationFunctionArray_getitem(arg1,arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActivationFunctionArray_setitem(void * jarg1, int jarg2, int jarg3) {
  ActivationFunctionArray *arg1 = (ActivationFunctionArray *) 0 ;
  int arg2 ;
  ActivationFunction arg3 ;
  
  arg1 = (ActivationFunctionArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ActivationFunction)jarg3; 
  ActivationFunctionArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActivationFunctionArray_cast(void * jarg1) {
  void * jresult ;
  ActivationFunctionArray *arg1 = (ActivationFunctionArray *) 0 ;
  ActivationFunction *result = 0 ;
  
  arg1 = (ActivationFunctionArray *)jarg1; 
  result = (ActivationFunction *)ActivationFunctionArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActivationFunctionArray_frompointer(void * jarg1) {
  void * jresult ;
  ActivationFunction *arg1 = (ActivationFunction *) 0 ;
  ActivationFunctionArray *result = 0 ;
  
  arg1 = (ActivationFunction *)jarg1; 
  result = (ActivationFunctionArray *)ActivationFunctionArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ConnectionArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  ConnectionArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (ConnectionArray *)new_ConnectionArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ConnectionArray(void * jarg1) {
  ConnectionArray *arg1 = (ConnectionArray *) 0 ;
  
  arg1 = (ConnectionArray *)jarg1; 
  delete_ConnectionArray(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConnectionArray_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  ConnectionArray *arg1 = (ConnectionArray *) 0 ;
  int arg2 ;
  fann_connection result;
  
  arg1 = (ConnectionArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = ConnectionArray_getitem(arg1,arg2);
  jresult = new fann_connection((const fann_connection &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConnectionArray_setitem(void * jarg1, int jarg2, void * jarg3) {
  ConnectionArray *arg1 = (ConnectionArray *) 0 ;
  int arg2 ;
  fann_connection arg3 ;
  fann_connection *argp3 ;
  
  arg1 = (ConnectionArray *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (fann_connection *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null fann_connection", 0);
    return ;
  }
  arg3 = *argp3; 
  ConnectionArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConnectionArray_cast(void * jarg1) {
  void * jresult ;
  ConnectionArray *arg1 = (ConnectionArray *) 0 ;
  fann_connection *result = 0 ;
  
  arg1 = (ConnectionArray *)jarg1; 
  result = (fann_connection *)ConnectionArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConnectionArray_frompointer(void * jarg1) {
  void * jresult ;
  fann_connection *arg1 = (fann_connection *) 0 ;
  ConnectionArray *result = 0 ;
  
  arg1 = (fann_connection *)jarg1; 
  result = (ConnectionArray *)ConnectionArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Connection_from_neuron_set(void * jarg1, unsigned int jarg2) {
  fann_connection *arg1 = (fann_connection *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann_connection *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->from_neuron = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Connection_from_neuron_get(void * jarg1) {
  unsigned int jresult ;
  fann_connection *arg1 = (fann_connection *) 0 ;
  unsigned int result;
  
  arg1 = (fann_connection *)jarg1; 
  result = (unsigned int) ((arg1)->from_neuron);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Connection_to_neuron_set(void * jarg1, unsigned int jarg2) {
  fann_connection *arg1 = (fann_connection *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (fann_connection *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->to_neuron = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Connection_to_neuron_get(void * jarg1) {
  unsigned int jresult ;
  fann_connection *arg1 = (fann_connection *) 0 ;
  unsigned int result;
  
  arg1 = (fann_connection *)jarg1; 
  result = (unsigned int) ((arg1)->to_neuron);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Connection_weight_set(void * jarg1, int jarg2) {
  fann_connection *arg1 = (fann_connection *) 0 ;
  fann_type arg2 ;
  
  arg1 = (fann_connection *)jarg1; 
  arg2 = (fann_type)jarg2; 
  if (arg1) (arg1)->weight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Connection_weight_get(void * jarg1) {
  int jresult ;
  fann_connection *arg1 = (fann_connection *) 0 ;
  fann_type result;
  
  arg1 = (fann_connection *)jarg1; 
  result = (fann_type) ((arg1)->weight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Connection() {
  void * jresult ;
  fann_connection *result = 0 ;
  
  result = (fann_connection *)new fann_connection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Connection(void * jarg1) {
  fann_connection *arg1 = (fann_connection *) 0 ;
  
  arg1 = (fann_connection *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_training_data__SWIG_0() {
  void * jresult ;
  FANN::training_data *result = 0 ;
  
  result = (FANN::training_data *)new FANN::training_data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_training_data__SWIG_1(void * jarg1) {
  void * jresult ;
  FANN::training_data *arg1 = 0 ;
  FANN::training_data *result = 0 ;
  
  arg1 = (FANN::training_data *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FANN::training_data const & type is null", 0);
    return 0;
  } 
  result = (FANN::training_data *)new FANN::training_data((FANN::training_data const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_training_data(void * jarg1) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_training_data_destroy_train(void * jarg1) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  (arg1)->destroy_train();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_training_data_read_train_from_file(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (FANN::training_data *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->read_train_from_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_training_data_save_train(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (FANN::training_data *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->save_train((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_training_data_save_train_to_fixed(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  bool result;
  
  arg1 = (FANN::training_data *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->save_train_to_fixed((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_training_data_shuffle_train_data(void * jarg1) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  (arg1)->shuffle_train_data();
}


SWIGEXPORT void SWIGSTDCALL CSharp_training_data_merge_train_data(void * jarg1, void * jarg2) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  FANN::training_data *arg2 = 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  arg2 = (FANN::training_data *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FANN::training_data const & type is null", 0);
    return ;
  } 
  (arg1)->merge_train_data((FANN::training_data const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_training_data_length_train_data(void * jarg1) {
  unsigned int jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::training_data *)jarg1; 
  result = (unsigned int)(arg1)->length_train_data();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_training_data_num_input_train_data(void * jarg1) {
  unsigned int jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::training_data *)jarg1; 
  result = (unsigned int)(arg1)->num_input_train_data();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_training_data_num_output_train_data(void * jarg1) {
  unsigned int jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::training_data *)jarg1; 
  result = (unsigned int)(arg1)->num_output_train_data();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_training_data_get_input(void * jarg1) {
  void * jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  fann_type **result = 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  result = (fann_type **)(arg1)->get_input();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_training_data_get_output(void * jarg1) {
  void * jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  fann_type **result = 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  result = (fann_type **)(arg1)->get_output();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_training_data_get_train_input(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  unsigned int arg2 ;
  fann_type *result = 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (fann_type *)(arg1)->get_train_input(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_training_data_get_train_output(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  unsigned int arg2 ;
  fann_type *result = 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (fann_type *)(arg1)->get_train_output(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_training_data_set_train_data__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, void * jarg6) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  fann_type **arg4 = (fann_type **) 0 ;
  unsigned int arg5 ;
  fann_type **arg6 = (fann_type **) 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (fann_type **)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (fann_type **)jarg6; 
  (arg1)->set_train_data(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_training_data_set_train_data__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, int* jarg4, unsigned int jarg5, int* jarg6) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  fann_type *arg4 = (fann_type *) 0 ;
  unsigned int arg5 ;
  fann_type *arg6 = (fann_type *) 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = jarg4;
  arg5 = (unsigned int)jarg5; 
  arg6 = jarg6;
  (arg1)->set_train_data(arg2,arg3,arg4,arg5,arg6);
  
  
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_training_data_create_train_from_callback(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  void (__stdcall *arg5)(unsigned int,unsigned int,unsigned int,fann_type *,fann_type *) = (void (__stdcall *)(unsigned int,unsigned int,unsigned int,fann_type *,fann_type *)) 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (void (__stdcall *)(unsigned int,unsigned int,unsigned int, int *, int *))jarg5;
  (arg1)->create_train_from_callback(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_training_data_scale_input_train_data(void * jarg1, int jarg2, int jarg3) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  fann_type arg2 ;
  fann_type arg3 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  arg2 = (fann_type)jarg2; 
  arg3 = (fann_type)jarg3; 
  (arg1)->scale_input_train_data(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_training_data_scale_output_train_data(void * jarg1, int jarg2, int jarg3) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  fann_type arg2 ;
  fann_type arg3 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  arg2 = (fann_type)jarg2; 
  arg3 = (fann_type)jarg3; 
  (arg1)->scale_output_train_data(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_training_data_scale_train_data(void * jarg1, int jarg2, int jarg3) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  fann_type arg2 ;
  fann_type arg3 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  arg2 = (fann_type)jarg2; 
  arg3 = (fann_type)jarg3; 
  (arg1)->scale_train_data(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_training_data_subset_train_data(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->subset_train_data(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_training_data_to_fann_train_data(void * jarg1) {
  void * jresult ;
  FANN::training_data *arg1 = (FANN::training_data *) 0 ;
  fann_train_data *result = 0 ;
  
  arg1 = (FANN::training_data *)jarg1; 
  result = (fann_train_data *)(arg1)->operator struct fann_train_data*();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_neural_net__SWIG_0(int jarg1, unsigned int jarg2, void * jarg3) {
  void * jresult ;
  FANN::network_type_enum arg1 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  FANN::neural_net *result = 0 ;
  
  arg1 = (FANN::network_type_enum)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  result = (FANN::neural_net *)new FANN::neural_net(arg1,arg2,(unsigned int const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_neural_net__SWIG_2(int jarg1, unsigned int jarg2) {
  void * jresult ;
  FANN::network_type_enum arg1 ;
  unsigned int arg2 ;
  void *arg3 = 0 ;
  FANN::neural_net *result = 0 ;
  
  arg1 = (FANN::network_type_enum)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (FANN::neural_net *)new FANN::neural_net(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_neural_net__SWIG_3(float jarg1, unsigned int jarg2) {
  void * jresult ;
  float arg1 ;
  unsigned int arg2 ;
  void *arg3 = 0 ;
  FANN::neural_net *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (FANN::neural_net *)new FANN::neural_net(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_neural_net__SWIG_4(float jarg1, unsigned int jarg2, void * jarg3) {
  void * jresult ;
  float arg1 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  FANN::neural_net *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  result = (FANN::neural_net *)new FANN::neural_net(arg1,arg2,(unsigned int const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_neural_net__SWIG_5(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  FANN::neural_net *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (FANN::neural_net *)new FANN::neural_net((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_neural_net__SWIG_6(void * jarg1) {
  void * jresult ;
  FANN::neural_net *arg1 = 0 ;
  FANN::neural_net *result = 0 ;
  
  arg1 = (FANN::neural_net *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FANN::neural_net const & type is null", 0);
    return 0;
  } 
  result = (FANN::neural_net *)new FANN::neural_net((FANN::neural_net const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_neural_net__SWIG_7(void * jarg1) {
  void * jresult ;
  fann *arg1 = (fann *) 0 ;
  FANN::neural_net *result = 0 ;
  
  arg1 = (fann *)jarg1; 
  result = (FANN::neural_net *)new FANN::neural_net(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_neural_net__SWIG_8() {
  void * jresult ;
  FANN::neural_net *result = 0 ;
  
  result = (FANN::neural_net *)new FANN::neural_net();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_copy_from_struct_fann(void * jarg1, void * jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann *arg2 = (fann *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann *)jarg2; 
  (arg1)->copy_from_struct_fann(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_neural_net(void * jarg1) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_destroy(void * jarg1) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  (arg1)->destroy();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_create_standard(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int arg2 ;
  void *arg3 = 0 ;
  bool result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->create_standard(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_create_standard_array(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  bool result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  result = (bool)(arg1)->create_standard_array(arg2,(unsigned int const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_create_sparse(void * jarg1, float jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  unsigned int arg3 ;
  void *arg4 = 0 ;
  bool result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->create_sparse(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_create_sparse_array(void * jarg1, float jarg2, unsigned int jarg3, void * jarg4) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  unsigned int arg3 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  bool result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int *)jarg4; 
  result = (bool)(arg1)->create_sparse_array(arg2,arg3,(unsigned int const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_create_shortcut(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int arg2 ;
  void *arg3 = 0 ;
  bool result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->create_shortcut(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_create_shortcut_array(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int arg2 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  bool result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  result = (bool)(arg1)->create_shortcut_array(arg2,(unsigned int const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_neural_net_run(void * jarg1, int* jarg2) {
  void * jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type *arg2 = (fann_type *) 0 ;
  fann_type *result = 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = jarg2;
  result = (fann_type *)(arg1)->run(arg2);
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_randomize_weights(void * jarg1, int jarg2, int jarg3) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type arg2 ;
  fann_type arg3 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type)jarg2; 
  arg3 = (fann_type)jarg3; 
  (arg1)->randomize_weights(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_init_weights(void * jarg1, void * jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::training_data *arg2 = 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::training_data *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FANN::training_data const & type is null", 0);
    return ;
  } 
  (arg1)->init_weights((FANN::training_data const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_print_connections(void * jarg1) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  (arg1)->print_connections();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_create_from_file(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->create_from_file((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_save(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->save((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_neural_net_save_to_fixed(void * jarg1, char * jarg2) {
  int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)(arg1)->save_to_fixed((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_neural_net_test(void * jarg1, int* jarg2, int* jarg3) {
  void * jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type *arg2 = (fann_type *) 0 ;
  fann_type *arg3 = (fann_type *) 0 ;
  fann_type *result = 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = jarg2;
  arg3 = jarg3;
  result = (fann_type *)(arg1)->test(arg2,arg3);
  jresult = (void *)result; 
  
  
  
  
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_test_data(void * jarg1, void * jarg2) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::training_data *arg2 = 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::training_data *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FANN::training_data const & type is null", 0);
    return 0;
  } 
  result = (float)(arg1)->test_data((FANN::training_data const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_MSE(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_MSE();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_reset_MSE(void * jarg1) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  (arg1)->reset_MSE();
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_print_parameters(void * jarg1) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  (arg1)->print_parameters();
}


SWIGEXPORT int SWIGSTDCALL CSharp_neural_net_get_training_algorithm(void * jarg1) {
  int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::training_algorithm_enum result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (FANN::training_algorithm_enum)(arg1)->get_training_algorithm();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_training_algorithm(void * jarg1, int jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::training_algorithm_enum arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::training_algorithm_enum)jarg2; 
  (arg1)->set_training_algorithm(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_learning_rate(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_learning_rate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_learning_rate(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_learning_rate(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_neural_net_get_activation_function(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  int arg2 ;
  int arg3 ;
  FANN::activation_function_enum result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (FANN::activation_function_enum)(arg1)->get_activation_function(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_activation_function(void * jarg1, int jarg2, int jarg3, int jarg4) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::activation_function_enum arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::activation_function_enum)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->set_activation_function(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_activation_function_layer(void * jarg1, int jarg2, int jarg3) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::activation_function_enum arg2 ;
  int arg3 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::activation_function_enum)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set_activation_function_layer(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_activation_function_hidden(void * jarg1, int jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::activation_function_enum arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::activation_function_enum)jarg2; 
  (arg1)->set_activation_function_hidden(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_activation_function_output(void * jarg1, int jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::activation_function_enum arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::activation_function_enum)jarg2; 
  (arg1)->set_activation_function_output(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_neural_net_get_activation_steepness(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  int arg2 ;
  int arg3 ;
  fann_type result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (fann_type)(arg1)->get_activation_steepness(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_activation_steepness(void * jarg1, int jarg2, int jarg3, int jarg4) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->set_activation_steepness(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_activation_steepness_layer(void * jarg1, int jarg2, int jarg3) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type arg2 ;
  int arg3 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set_activation_steepness_layer(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_activation_steepness_hidden(void * jarg1, int jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type)jarg2; 
  (arg1)->set_activation_steepness_hidden(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_activation_steepness_output(void * jarg1, int jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type)jarg2; 
  (arg1)->set_activation_steepness_output(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_neural_net_get_train_error_function(void * jarg1) {
  int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::error_function_enum result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (FANN::error_function_enum)(arg1)->get_train_error_function();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_train_error_function(void * jarg1, int jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::error_function_enum arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::error_function_enum)jarg2; 
  (arg1)->set_train_error_function(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_quickprop_decay(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_quickprop_decay();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_quickprop_decay(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_quickprop_decay(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_quickprop_mu(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_quickprop_mu();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_quickprop_mu(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_quickprop_mu(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_rprop_increase_factor(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_rprop_increase_factor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_rprop_increase_factor(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_rprop_increase_factor(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_rprop_decrease_factor(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_rprop_decrease_factor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_rprop_decrease_factor(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_rprop_decrease_factor(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_rprop_delta_zero(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_rprop_delta_zero();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_rprop_delta_zero(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_rprop_delta_zero(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_rprop_delta_min(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_rprop_delta_min();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_rprop_delta_min(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_rprop_delta_min(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_rprop_delta_max(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_rprop_delta_max();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_rprop_delta_max(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_rprop_delta_max(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_sarprop_weight_decay_shift(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_sarprop_weight_decay_shift();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_sarprop_weight_decay_shift(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_sarprop_weight_decay_shift(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_sarprop_step_error_threshold_factor(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_sarprop_step_error_threshold_factor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_sarprop_step_error_threshold_factor(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_sarprop_step_error_threshold_factor(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_sarprop_step_error_shift(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_sarprop_step_error_shift();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_sarprop_step_error_shift(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_sarprop_step_error_shift(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_sarprop_temperature(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_sarprop_temperature();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_sarprop_temperature(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_sarprop_temperature(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_num_input(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_num_input();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_num_output(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_num_output();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_total_neurons(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_total_neurons();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_total_connections(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_total_connections();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_decimal_point(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_decimal_point();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_multiplier(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_multiplier();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_neural_net_get_network_type(void * jarg1) {
  int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::network_type_enum result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (FANN::network_type_enum)(arg1)->get_network_type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_connection_rate(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_connection_rate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_num_layers(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_num_layers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_get_layer_array(void * jarg1, void * jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->get_layer_array(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_get_bias_array(void * jarg1, void * jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  (arg1)->get_bias_array(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_get_connection_array(void * jarg1, void * jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::connection *arg2 = (FANN::connection *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::connection *)jarg2; 
  (arg1)->get_connection_array(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_weight_array(void * jarg1, void * jarg2, unsigned int jarg3) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::connection *arg2 = (FANN::connection *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::connection *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->set_weight_array(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_weight(void * jarg1, unsigned int jarg2, unsigned int jarg3, int jarg4) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  fann_type arg4 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (fann_type)jarg4; 
  (arg1)->set_weight(arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_neural_net_get_learning_momentum(void * jarg1) {
  float jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (float)(arg1)->get_learning_momentum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_learning_momentum(void * jarg1, float jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  float arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->set_learning_momentum(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_neural_net_get_train_stop_function(void * jarg1) {
  int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::stop_function_enum result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (FANN::stop_function_enum)(arg1)->get_train_stop_function();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_train_stop_function(void * jarg1, int jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FANN::stop_function_enum arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FANN::stop_function_enum)jarg2; 
  (arg1)->set_train_stop_function(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_neural_net_get_bit_fail_limit(void * jarg1) {
  int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (fann_type)(arg1)->get_bit_fail_limit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_bit_fail_limit(void * jarg1, int jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann_type arg2 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (fann_type)jarg2; 
  (arg1)->set_bit_fail_limit(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_bit_fail(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_bit_fail();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_set_error_log(void * jarg1, void * jarg2) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  arg2 = (FILE *)jarg2; 
  (arg1)->set_error_log(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_neural_net_get_errno(void * jarg1) {
  unsigned int jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  unsigned int result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (unsigned int)(arg1)->get_errno();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_reset_errno(void * jarg1) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  (arg1)->reset_errno();
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_reset_errstr(void * jarg1) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  (arg1)->reset_errstr();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_neural_net_get_errstr(void * jarg1) {
  char * jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  std::string result;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (arg1)->get_errstr();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_print_error(void * jarg1) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  (arg1)->print_error();
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_disable_seed_rand(void * jarg1) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  (arg1)->disable_seed_rand();
}


SWIGEXPORT void SWIGSTDCALL CSharp_neural_net_enable_seed_rand(void * jarg1) {
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  (arg1)->enable_seed_rand();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_neural_net_to_fann(void * jarg1) {
  void * jresult ;
  FANN::neural_net *arg1 = (FANN::neural_net *) 0 ;
  fann *result = 0 ;
  
  arg1 = (FANN::neural_net *)jarg1; 
  result = (fann *)(arg1)->operator struct fann*();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_intArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  intArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (intArray *)new_intArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_intArray(void * jarg1) {
  intArray *arg1 = (intArray *) 0 ;
  
  arg1 = (intArray *)jarg1; 
  delete_intArray(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_intArray_getitem(void * jarg1, int jarg2) {
  int jresult ;
  intArray *arg1 = (intArray *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (intArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)intArray_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_intArray_setitem(void * jarg1, int jarg2, int jarg3) {
  intArray *arg1 = (intArray *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (intArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  intArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_intArray_cast(void * jarg1) {
  void * jresult ;
  intArray *arg1 = (intArray *) 0 ;
  int *result = 0 ;
  
  arg1 = (intArray *)jarg1; 
  result = (int *)intArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_intArray_frompointer(void * jarg1) {
  void * jresult ;
  int *arg1 = (int *) 0 ;
  intArray *result = 0 ;
  
  arg1 = (int *)jarg1; 
  result = (intArray *)intArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_intArrayArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  intArrayArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (intArrayArray *)new_intArrayArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_intArrayArray(void * jarg1) {
  intArrayArray *arg1 = (intArrayArray *) 0 ;
  
  arg1 = (intArrayArray *)jarg1; 
  delete_intArrayArray(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_intArrayArray_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  intArrayArray *arg1 = (intArrayArray *) 0 ;
  int arg2 ;
  int_ptr result;
  
  arg1 = (intArrayArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int_ptr)intArrayArray_getitem(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_intArrayArray_setitem(void * jarg1, int jarg2, void * jarg3) {
  intArrayArray *arg1 = (intArrayArray *) 0 ;
  int arg2 ;
  int_ptr arg3 = (int_ptr) 0 ;
  
  arg1 = (intArrayArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int_ptr)jarg3; 
  intArrayArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_intArrayArray_cast(void * jarg1) {
  void * jresult ;
  intArrayArray *arg1 = (intArrayArray *) 0 ;
  int_ptr *result = 0 ;
  
  arg1 = (intArrayArray *)jarg1; 
  result = (int_ptr *)intArrayArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_intArrayArray_frompointer(void * jarg1) {
  void * jresult ;
  int_ptr *arg1 = (int_ptr *) 0 ;
  intArrayArray *result = 0 ;
  
  arg1 = (int_ptr *)jarg1; 
  result = (intArrayArray *)intArrayArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntAccessor_Get(void * jarg1, int jarg2) {
  int jresult ;
  _IntAccessor *arg1 = (_IntAccessor *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (_IntAccessor *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->Get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntAccessor_FromPointer(void * jarg1) {
  void * jresult ;
  int *arg1 = (int *) 0 ;
  _IntAccessor *result = 0 ;
  
  arg1 = (int *)jarg1; 
  result = (_IntAccessor *)_IntAccessor::FromPointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntAccessor_Cast(void * jarg1) {
  void * jresult ;
  _IntAccessor *arg1 = (_IntAccessor *) 0 ;
  int *result = 0 ;
  
  arg1 = (_IntAccessor *)jarg1; 
  result = (int *)(arg1)->Cast();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntAccessor() {
  void * jresult ;
  _IntAccessor *result = 0 ;
  
  result = (_IntAccessor *)new _IntAccessor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntAccessor(void * jarg1) {
  _IntAccessor *arg1 = (_IntAccessor *) 0 ;
  
  arg1 = (_IntAccessor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntArrayAccessor_Get__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  _IntArrayAccessor *arg1 = (_IntArrayAccessor *) 0 ;
  int arg2 ;
  _IntAccessor *result = 0 ;
  
  arg1 = (_IntArrayAccessor *)jarg1; 
  arg2 = (int)jarg2; 
  result = (_IntAccessor *)(arg1)->Get(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntArrayAccessor_Get__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  _IntArrayAccessor *arg1 = (_IntArrayAccessor *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (_IntArrayAccessor *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->Get(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntArrayAccessor_FromPointer(void * jarg1) {
  void * jresult ;
  int **arg1 = (int **) 0 ;
  _IntArrayAccessor *result = 0 ;
  
  arg1 = (int **)jarg1; 
  result = (_IntArrayAccessor *)_IntArrayAccessor::FromPointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntArrayAccessor_Cast(void * jarg1) {
  void * jresult ;
  _IntArrayAccessor *arg1 = (_IntArrayAccessor *) 0 ;
  int **result = 0 ;
  
  arg1 = (_IntArrayAccessor *)jarg1; 
  result = (int **)(arg1)->Cast();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntArrayAccessor() {
  void * jresult ;
  _IntArrayAccessor *result = 0 ;
  
  result = (_IntArrayAccessor *)new _IntArrayAccessor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntArrayAccessor(void * jarg1) {
  _IntArrayAccessor *arg1 = (_IntArrayAccessor *) 0 ;
  
  arg1 = (_IntArrayAccessor *)jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

