//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

using FANNCSharp;
namespace FannWrapperDouble {

internal class neural_net : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal neural_net(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(neural_net obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~neural_net() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          fanndoublePINVOKE.delete_neural_net(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public neural_net(NetworkType net_type, uint num_layers, SWIGTYPE_p_unsigned_int layers) : this(fanndoublePINVOKE.new_neural_net__SWIG_0((int)net_type, num_layers, SWIGTYPE_p_unsigned_int.getCPtr(layers)), true) {
  }

  public neural_net(NetworkType net_type, uint num_layers) : this(fanndoublePINVOKE.new_neural_net__SWIG_2((int)net_type, num_layers), true) {
  }

  public neural_net(float connection_rate, uint num_layers) : this(fanndoublePINVOKE.new_neural_net__SWIG_3(connection_rate, num_layers), true) {
  }

  public neural_net(float connection_rate, uint num_layers, SWIGTYPE_p_unsigned_int layers) : this(fanndoublePINVOKE.new_neural_net__SWIG_4(connection_rate, num_layers, SWIGTYPE_p_unsigned_int.getCPtr(layers)), true) {
  }

  public neural_net(string configuration_file) : this(fanndoublePINVOKE.new_neural_net__SWIG_5(configuration_file), true) {
    if (fanndoublePINVOKE.SWIGPendingException.Pending) throw fanndoublePINVOKE.SWIGPendingException.Retrieve();
  }

  public neural_net(neural_net other) : this(fanndoublePINVOKE.new_neural_net__SWIG_6(neural_net.getCPtr(other)), true) {
    if (fanndoublePINVOKE.SWIGPendingException.Pending) throw fanndoublePINVOKE.SWIGPendingException.Retrieve();
  }

  public neural_net(SWIGTYPE_p_fann other) : this(fanndoublePINVOKE.new_neural_net__SWIG_7(SWIGTYPE_p_fann.getCPtr(other)), true) {
  }

  public neural_net() : this(fanndoublePINVOKE.new_neural_net__SWIG_8(), true) {
  }

  public void copy_from_struct_fann(SWIGTYPE_p_fann other) {
    fanndoublePINVOKE.neural_net_copy_from_struct_fann(swigCPtr, SWIGTYPE_p_fann.getCPtr(other));
  }

  public void destroy() {
    fanndoublePINVOKE.neural_net_destroy(swigCPtr);
  }

  public bool create_standard(uint num_layers) {
    bool ret = fanndoublePINVOKE.neural_net_create_standard(swigCPtr, num_layers);
    return ret;
  }

  public bool create_standard_array(uint num_layers, SWIGTYPE_p_unsigned_int layers) {
    bool ret = fanndoublePINVOKE.neural_net_create_standard_array(swigCPtr, num_layers, SWIGTYPE_p_unsigned_int.getCPtr(layers));
    return ret;
  }

  public bool create_sparse(float connection_rate, uint num_layers) {
    bool ret = fanndoublePINVOKE.neural_net_create_sparse(swigCPtr, connection_rate, num_layers);
    return ret;
  }

  public bool create_sparse_array(float connection_rate, uint num_layers, SWIGTYPE_p_unsigned_int layers) {
    bool ret = fanndoublePINVOKE.neural_net_create_sparse_array(swigCPtr, connection_rate, num_layers, SWIGTYPE_p_unsigned_int.getCPtr(layers));
    return ret;
  }

  public bool create_shortcut(uint num_layers) {
    bool ret = fanndoublePINVOKE.neural_net_create_shortcut(swigCPtr, num_layers);
    return ret;
  }

  public bool create_shortcut_array(uint num_layers, SWIGTYPE_p_unsigned_int layers) {
    bool ret = fanndoublePINVOKE.neural_net_create_shortcut_array(swigCPtr, num_layers, SWIGTYPE_p_unsigned_int.getCPtr(layers));
    return ret;
  }

  public SWIGTYPE_p_double run(double[] input) {
    global::System.IntPtr cPtr = fanndoublePINVOKE.neural_net_run(swigCPtr, input);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public void randomize_weights(double min_weight, double max_weight) {
    fanndoublePINVOKE.neural_net_randomize_weights(swigCPtr, min_weight, max_weight);
  }

  public void init_weights(training_data data) {
    fanndoublePINVOKE.neural_net_init_weights(swigCPtr, training_data.getCPtr(data));
    if (fanndoublePINVOKE.SWIGPendingException.Pending) throw fanndoublePINVOKE.SWIGPendingException.Retrieve();
  }

  public void print_connections() {
    fanndoublePINVOKE.neural_net_print_connections(swigCPtr);
  }

  public bool create_from_file(string configuration_file) {
    bool ret = fanndoublePINVOKE.neural_net_create_from_file(swigCPtr, configuration_file);
    if (fanndoublePINVOKE.SWIGPendingException.Pending) throw fanndoublePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool save(string configuration_file) {
    bool ret = fanndoublePINVOKE.neural_net_save(swigCPtr, configuration_file);
    if (fanndoublePINVOKE.SWIGPendingException.Pending) throw fanndoublePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int save_to_fixed(string configuration_file) {
    int ret = fanndoublePINVOKE.neural_net_save_to_fixed(swigCPtr, configuration_file);
    if (fanndoublePINVOKE.SWIGPendingException.Pending) throw fanndoublePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void train(double[] input, double[] desired_output) {
    fanndoublePINVOKE.neural_net_train(swigCPtr, input, desired_output);
  }

  public float train_epoch(training_data data) {
    float ret = fanndoublePINVOKE.neural_net_train_epoch(swigCPtr, training_data.getCPtr(data));
    if (fanndoublePINVOKE.SWIGPendingException.Pending) throw fanndoublePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void train_on_data(training_data data, uint max_epochs, uint epochs_between_reports, float desired_error) {
    fanndoublePINVOKE.neural_net_train_on_data(swigCPtr, training_data.getCPtr(data), max_epochs, epochs_between_reports, desired_error);
    if (fanndoublePINVOKE.SWIGPendingException.Pending) throw fanndoublePINVOKE.SWIGPendingException.Retrieve();
  }

  public void train_on_file(string filename, uint max_epochs, uint epochs_between_reports, float desired_error) {
    fanndoublePINVOKE.neural_net_train_on_file(swigCPtr, filename, max_epochs, epochs_between_reports, desired_error);
    if (fanndoublePINVOKE.SWIGPendingException.Pending) throw fanndoublePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_double test(double[] input, double[] desired_output) {
    global::System.IntPtr cPtr = fanndoublePINVOKE.neural_net_test(swigCPtr, input, desired_output);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public float test_data(training_data data) {
    float ret = fanndoublePINVOKE.neural_net_test_data(swigCPtr, training_data.getCPtr(data));
    if (fanndoublePINVOKE.SWIGPendingException.Pending) throw fanndoublePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float get_MSE() {
    float ret = fanndoublePINVOKE.neural_net_get_MSE(swigCPtr);
    return ret;
  }

  public void reset_MSE() {
    fanndoublePINVOKE.neural_net_reset_MSE(swigCPtr);
  }

  public void set_callback(global::System.IntPtr callback, global::System.IntPtr user_data) {
    fanndoublePINVOKE.neural_net_set_callback(swigCPtr, callback, user_data);
  }

  public void print_parameters() {
    fanndoublePINVOKE.neural_net_print_parameters(swigCPtr);
  }

  public TrainingAlgorithm get_training_algorithm() {
    TrainingAlgorithm ret = (TrainingAlgorithm)fanndoublePINVOKE.neural_net_get_training_algorithm(swigCPtr);
    return ret;
  }

  public void set_training_algorithm(TrainingAlgorithm training_algorithm) {
    fanndoublePINVOKE.neural_net_set_training_algorithm(swigCPtr, (int)training_algorithm);
  }

  public float get_learning_rate() {
    float ret = fanndoublePINVOKE.neural_net_get_learning_rate(swigCPtr);
    return ret;
  }

  public void set_learning_rate(float learning_rate) {
    fanndoublePINVOKE.neural_net_set_learning_rate(swigCPtr, learning_rate);
  }

  public ActivationFunction get_activation_function(int layer, int neuron) {
    ActivationFunction ret = (ActivationFunction)fanndoublePINVOKE.neural_net_get_activation_function(swigCPtr, layer, neuron);
    return ret;
  }

  public void set_activation_function(ActivationFunction activation_function, int layer, int neuron) {
    fanndoublePINVOKE.neural_net_set_activation_function(swigCPtr, (int)activation_function, layer, neuron);
  }

  public void set_activation_function_layer(ActivationFunction activation_function, int layer) {
    fanndoublePINVOKE.neural_net_set_activation_function_layer(swigCPtr, (int)activation_function, layer);
  }

  public void set_activation_function_hidden(ActivationFunction activation_function) {
    fanndoublePINVOKE.neural_net_set_activation_function_hidden(swigCPtr, (int)activation_function);
  }

  public void set_activation_function_output(ActivationFunction activation_function) {
    fanndoublePINVOKE.neural_net_set_activation_function_output(swigCPtr, (int)activation_function);
  }

  public double get_activation_steepness(int layer, int neuron) {
    double ret = fanndoublePINVOKE.neural_net_get_activation_steepness(swigCPtr, layer, neuron);
    return ret;
  }

  public void set_activation_steepness(double steepness, int layer, int neuron) {
    fanndoublePINVOKE.neural_net_set_activation_steepness(swigCPtr, steepness, layer, neuron);
  }

  public void set_activation_steepness_layer(double steepness, int layer) {
    fanndoublePINVOKE.neural_net_set_activation_steepness_layer(swigCPtr, steepness, layer);
  }

  public void set_activation_steepness_hidden(double steepness) {
    fanndoublePINVOKE.neural_net_set_activation_steepness_hidden(swigCPtr, steepness);
  }

  public void set_activation_steepness_output(double steepness) {
    fanndoublePINVOKE.neural_net_set_activation_steepness_output(swigCPtr, steepness);
  }

  public ErrorFunction get_train_error_function() {
    ErrorFunction ret = (ErrorFunction)fanndoublePINVOKE.neural_net_get_train_error_function(swigCPtr);
    return ret;
  }

  public void set_train_error_function(ErrorFunction train_error_function) {
    fanndoublePINVOKE.neural_net_set_train_error_function(swigCPtr, (int)train_error_function);
  }

  public float get_quickprop_decay() {
    float ret = fanndoublePINVOKE.neural_net_get_quickprop_decay(swigCPtr);
    return ret;
  }

  public void set_quickprop_decay(float quickprop_decay) {
    fanndoublePINVOKE.neural_net_set_quickprop_decay(swigCPtr, quickprop_decay);
  }

  public float get_quickprop_mu() {
    float ret = fanndoublePINVOKE.neural_net_get_quickprop_mu(swigCPtr);
    return ret;
  }

  public void set_quickprop_mu(float quickprop_mu) {
    fanndoublePINVOKE.neural_net_set_quickprop_mu(swigCPtr, quickprop_mu);
  }

  public float get_rprop_increase_factor() {
    float ret = fanndoublePINVOKE.neural_net_get_rprop_increase_factor(swigCPtr);
    return ret;
  }

  public void set_rprop_increase_factor(float rprop_increase_factor) {
    fanndoublePINVOKE.neural_net_set_rprop_increase_factor(swigCPtr, rprop_increase_factor);
  }

  public float get_rprop_decrease_factor() {
    float ret = fanndoublePINVOKE.neural_net_get_rprop_decrease_factor(swigCPtr);
    return ret;
  }

  public void set_rprop_decrease_factor(float rprop_decrease_factor) {
    fanndoublePINVOKE.neural_net_set_rprop_decrease_factor(swigCPtr, rprop_decrease_factor);
  }

  public float get_rprop_delta_zero() {
    float ret = fanndoublePINVOKE.neural_net_get_rprop_delta_zero(swigCPtr);
    return ret;
  }

  public void set_rprop_delta_zero(float rprop_delta_zero) {
    fanndoublePINVOKE.neural_net_set_rprop_delta_zero(swigCPtr, rprop_delta_zero);
  }

  public float get_rprop_delta_min() {
    float ret = fanndoublePINVOKE.neural_net_get_rprop_delta_min(swigCPtr);
    return ret;
  }

  public void set_rprop_delta_min(float rprop_delta_min) {
    fanndoublePINVOKE.neural_net_set_rprop_delta_min(swigCPtr, rprop_delta_min);
  }

  public float get_rprop_delta_max() {
    float ret = fanndoublePINVOKE.neural_net_get_rprop_delta_max(swigCPtr);
    return ret;
  }

  public void set_rprop_delta_max(float rprop_delta_max) {
    fanndoublePINVOKE.neural_net_set_rprop_delta_max(swigCPtr, rprop_delta_max);
  }

  public float get_sarprop_weight_decay_shift() {
    float ret = fanndoublePINVOKE.neural_net_get_sarprop_weight_decay_shift(swigCPtr);
    return ret;
  }

  public void set_sarprop_weight_decay_shift(float sarprop_weight_decay_shift) {
    fanndoublePINVOKE.neural_net_set_sarprop_weight_decay_shift(swigCPtr, sarprop_weight_decay_shift);
  }

  public float get_sarprop_step_error_threshold_factor() {
    float ret = fanndoublePINVOKE.neural_net_get_sarprop_step_error_threshold_factor(swigCPtr);
    return ret;
  }

  public void set_sarprop_step_error_threshold_factor(float sarprop_step_error_threshold_factor) {
    fanndoublePINVOKE.neural_net_set_sarprop_step_error_threshold_factor(swigCPtr, sarprop_step_error_threshold_factor);
  }

  public float get_sarprop_step_error_shift() {
    float ret = fanndoublePINVOKE.neural_net_get_sarprop_step_error_shift(swigCPtr);
    return ret;
  }

  public void set_sarprop_step_error_shift(float sarprop_step_error_shift) {
    fanndoublePINVOKE.neural_net_set_sarprop_step_error_shift(swigCPtr, sarprop_step_error_shift);
  }

  public float get_sarprop_temperature() {
    float ret = fanndoublePINVOKE.neural_net_get_sarprop_temperature(swigCPtr);
    return ret;
  }

  public void set_sarprop_temperature(float sarprop_temperature) {
    fanndoublePINVOKE.neural_net_set_sarprop_temperature(swigCPtr, sarprop_temperature);
  }

  public uint get_num_input() {
    uint ret = fanndoublePINVOKE.neural_net_get_num_input(swigCPtr);
    return ret;
  }

  public uint get_num_output() {
    uint ret = fanndoublePINVOKE.neural_net_get_num_output(swigCPtr);
    return ret;
  }

  public uint get_total_neurons() {
    uint ret = fanndoublePINVOKE.neural_net_get_total_neurons(swigCPtr);
    return ret;
  }

  public uint get_total_connections() {
    uint ret = fanndoublePINVOKE.neural_net_get_total_connections(swigCPtr);
    return ret;
  }

  public NetworkType get_network_type() {
    NetworkType ret = (NetworkType)fanndoublePINVOKE.neural_net_get_network_type(swigCPtr);
    return ret;
  }

  public float get_connection_rate() {
    float ret = fanndoublePINVOKE.neural_net_get_connection_rate(swigCPtr);
    return ret;
  }

  public uint get_num_layers() {
    uint ret = fanndoublePINVOKE.neural_net_get_num_layers(swigCPtr);
    return ret;
  }

  public void get_layer_array(SWIGTYPE_p_unsigned_int layers) {
    fanndoublePINVOKE.neural_net_get_layer_array(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(layers));
  }

  public void get_bias_array(SWIGTYPE_p_unsigned_int bias) {
    fanndoublePINVOKE.neural_net_get_bias_array(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(bias));
  }

  public void get_connection_array(Connection connections) {
    fanndoublePINVOKE.neural_net_get_connection_array(swigCPtr, Connection.getCPtr(connections));
  }

  public void set_weight_array(Connection connections, uint num_connections) {
    fanndoublePINVOKE.neural_net_set_weight_array(swigCPtr, Connection.getCPtr(connections), num_connections);
  }

  public void set_weight(uint from_neuron, uint to_neuron, double weight) {
    fanndoublePINVOKE.neural_net_set_weight(swigCPtr, from_neuron, to_neuron, weight);
  }

  public float get_learning_momentum() {
    float ret = fanndoublePINVOKE.neural_net_get_learning_momentum(swigCPtr);
    return ret;
  }

  public void set_learning_momentum(float learning_momentum) {
    fanndoublePINVOKE.neural_net_set_learning_momentum(swigCPtr, learning_momentum);
  }

  public StopFunction get_train_stop_function() {
    StopFunction ret = (StopFunction)fanndoublePINVOKE.neural_net_get_train_stop_function(swigCPtr);
    return ret;
  }

  public void set_train_stop_function(StopFunction train_stop_function) {
    fanndoublePINVOKE.neural_net_set_train_stop_function(swigCPtr, (int)train_stop_function);
  }

  public double get_bit_fail_limit() {
    double ret = fanndoublePINVOKE.neural_net_get_bit_fail_limit(swigCPtr);
    return ret;
  }

  public void set_bit_fail_limit(double bit_fail_limit) {
    fanndoublePINVOKE.neural_net_set_bit_fail_limit(swigCPtr, bit_fail_limit);
  }

  public uint get_bit_fail() {
    uint ret = fanndoublePINVOKE.neural_net_get_bit_fail(swigCPtr);
    return ret;
  }

  public void cascadetrain_on_data(training_data data, uint max_neurons, uint neurons_between_reports, float desired_error) {
    fanndoublePINVOKE.neural_net_cascadetrain_on_data(swigCPtr, training_data.getCPtr(data), max_neurons, neurons_between_reports, desired_error);
    if (fanndoublePINVOKE.SWIGPendingException.Pending) throw fanndoublePINVOKE.SWIGPendingException.Retrieve();
  }

  public void cascadetrain_on_file(string filename, uint max_neurons, uint neurons_between_reports, float desired_error) {
    fanndoublePINVOKE.neural_net_cascadetrain_on_file(swigCPtr, filename, max_neurons, neurons_between_reports, desired_error);
    if (fanndoublePINVOKE.SWIGPendingException.Pending) throw fanndoublePINVOKE.SWIGPendingException.Retrieve();
  }

  public float get_cascade_output_change_fraction() {
    float ret = fanndoublePINVOKE.neural_net_get_cascade_output_change_fraction(swigCPtr);
    return ret;
  }

  public void set_cascade_output_change_fraction(float cascade_output_change_fraction) {
    fanndoublePINVOKE.neural_net_set_cascade_output_change_fraction(swigCPtr, cascade_output_change_fraction);
  }

  public uint get_cascade_output_stagnation_epochs() {
    uint ret = fanndoublePINVOKE.neural_net_get_cascade_output_stagnation_epochs(swigCPtr);
    return ret;
  }

  public void set_cascade_output_stagnation_epochs(uint cascade_output_stagnation_epochs) {
    fanndoublePINVOKE.neural_net_set_cascade_output_stagnation_epochs(swigCPtr, cascade_output_stagnation_epochs);
  }

  public float get_cascade_candidate_change_fraction() {
    float ret = fanndoublePINVOKE.neural_net_get_cascade_candidate_change_fraction(swigCPtr);
    return ret;
  }

  public void set_cascade_candidate_change_fraction(float cascade_candidate_change_fraction) {
    fanndoublePINVOKE.neural_net_set_cascade_candidate_change_fraction(swigCPtr, cascade_candidate_change_fraction);
  }

  public uint get_cascade_candidate_stagnation_epochs() {
    uint ret = fanndoublePINVOKE.neural_net_get_cascade_candidate_stagnation_epochs(swigCPtr);
    return ret;
  }

  public void set_cascade_candidate_stagnation_epochs(uint cascade_candidate_stagnation_epochs) {
    fanndoublePINVOKE.neural_net_set_cascade_candidate_stagnation_epochs(swigCPtr, cascade_candidate_stagnation_epochs);
  }

  public double get_cascade_weight_multiplier() {
    double ret = fanndoublePINVOKE.neural_net_get_cascade_weight_multiplier(swigCPtr);
    return ret;
  }

  public void set_cascade_weight_multiplier(double cascade_weight_multiplier) {
    fanndoublePINVOKE.neural_net_set_cascade_weight_multiplier(swigCPtr, cascade_weight_multiplier);
  }

  public double get_cascade_candidate_limit() {
    double ret = fanndoublePINVOKE.neural_net_get_cascade_candidate_limit(swigCPtr);
    return ret;
  }

  public void set_cascade_candidate_limit(double cascade_candidate_limit) {
    fanndoublePINVOKE.neural_net_set_cascade_candidate_limit(swigCPtr, cascade_candidate_limit);
  }

  public uint get_cascade_max_out_epochs() {
    uint ret = fanndoublePINVOKE.neural_net_get_cascade_max_out_epochs(swigCPtr);
    return ret;
  }

  public void set_cascade_max_out_epochs(uint cascade_max_out_epochs) {
    fanndoublePINVOKE.neural_net_set_cascade_max_out_epochs(swigCPtr, cascade_max_out_epochs);
  }

  public uint get_cascade_max_cand_epochs() {
    uint ret = fanndoublePINVOKE.neural_net_get_cascade_max_cand_epochs(swigCPtr);
    return ret;
  }

  public void set_cascade_max_cand_epochs(uint cascade_max_cand_epochs) {
    fanndoublePINVOKE.neural_net_set_cascade_max_cand_epochs(swigCPtr, cascade_max_cand_epochs);
  }

  public uint get_cascade_num_candidates() {
    uint ret = fanndoublePINVOKE.neural_net_get_cascade_num_candidates(swigCPtr);
    return ret;
  }

  public uint get_cascade_activation_functions_count() {
    uint ret = fanndoublePINVOKE.neural_net_get_cascade_activation_functions_count(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_FANN__activation_function_enum get_cascade_activation_functions() {
    global::System.IntPtr cPtr = fanndoublePINVOKE.neural_net_get_cascade_activation_functions(swigCPtr);
    SWIGTYPE_p_FANN__activation_function_enum ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FANN__activation_function_enum(cPtr, false);
    return ret;
  }

  public void set_cascade_activation_functions(SWIGTYPE_p_FANN__activation_function_enum cascade_activation_functions, uint cascade_activation_functions_count) {
    fanndoublePINVOKE.neural_net_set_cascade_activation_functions(swigCPtr, SWIGTYPE_p_FANN__activation_function_enum.getCPtr(cascade_activation_functions), cascade_activation_functions_count);
  }

  public uint get_cascade_activation_steepnesses_count() {
    uint ret = fanndoublePINVOKE.neural_net_get_cascade_activation_steepnesses_count(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_double get_cascade_activation_steepnesses() {
    global::System.IntPtr cPtr = fanndoublePINVOKE.neural_net_get_cascade_activation_steepnesses(swigCPtr);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public void set_cascade_activation_steepnesses(double[] cascade_activation_steepnesses, uint cascade_activation_steepnesses_count) {
    fanndoublePINVOKE.neural_net_set_cascade_activation_steepnesses(swigCPtr, cascade_activation_steepnesses, cascade_activation_steepnesses_count);
  }

  public uint get_cascade_num_candidate_groups() {
    uint ret = fanndoublePINVOKE.neural_net_get_cascade_num_candidate_groups(swigCPtr);
    return ret;
  }

  public void set_cascade_num_candidate_groups(uint cascade_num_candidate_groups) {
    fanndoublePINVOKE.neural_net_set_cascade_num_candidate_groups(swigCPtr, cascade_num_candidate_groups);
  }

  public void scale_train(training_data data) {
    fanndoublePINVOKE.neural_net_scale_train(swigCPtr, training_data.getCPtr(data));
    if (fanndoublePINVOKE.SWIGPendingException.Pending) throw fanndoublePINVOKE.SWIGPendingException.Retrieve();
  }

  public void descale_train(training_data data) {
    fanndoublePINVOKE.neural_net_descale_train(swigCPtr, training_data.getCPtr(data));
    if (fanndoublePINVOKE.SWIGPendingException.Pending) throw fanndoublePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool set_input_scaling_params(training_data data, float new_input_min, float new_input_max) {
    bool ret = fanndoublePINVOKE.neural_net_set_input_scaling_params(swigCPtr, training_data.getCPtr(data), new_input_min, new_input_max);
    if (fanndoublePINVOKE.SWIGPendingException.Pending) throw fanndoublePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool set_output_scaling_params(training_data data, float new_output_min, float new_output_max) {
    bool ret = fanndoublePINVOKE.neural_net_set_output_scaling_params(swigCPtr, training_data.getCPtr(data), new_output_min, new_output_max);
    if (fanndoublePINVOKE.SWIGPendingException.Pending) throw fanndoublePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool set_scaling_params(training_data data, float new_input_min, float new_input_max, float new_output_min, float new_output_max) {
    bool ret = fanndoublePINVOKE.neural_net_set_scaling_params(swigCPtr, training_data.getCPtr(data), new_input_min, new_input_max, new_output_min, new_output_max);
    if (fanndoublePINVOKE.SWIGPendingException.Pending) throw fanndoublePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool clear_scaling_params() {
    bool ret = fanndoublePINVOKE.neural_net_clear_scaling_params(swigCPtr);
    return ret;
  }

  public void scale_input(SWIGTYPE_p_double input_vector) {
    fanndoublePINVOKE.neural_net_scale_input(swigCPtr, SWIGTYPE_p_double.getCPtr(input_vector));
  }

  public void scale_output(SWIGTYPE_p_double output_vector) {
    fanndoublePINVOKE.neural_net_scale_output(swigCPtr, SWIGTYPE_p_double.getCPtr(output_vector));
  }

  public void set_error_log(SWIGTYPE_p_FILE log_file) {
    fanndoublePINVOKE.neural_net_set_error_log(swigCPtr, SWIGTYPE_p_FILE.getCPtr(log_file));
  }

  public uint get_errno() {
    uint ret = fanndoublePINVOKE.neural_net_get_errno(swigCPtr);
    return ret;
  }

  public void reset_errno() {
    fanndoublePINVOKE.neural_net_reset_errno(swigCPtr);
  }

  public void reset_errstr() {
    fanndoublePINVOKE.neural_net_reset_errstr(swigCPtr);
  }

  public string get_errstr() {
    string ret = fanndoublePINVOKE.neural_net_get_errstr(swigCPtr);
    return ret;
  }

  public void print_error() {
    fanndoublePINVOKE.neural_net_print_error(swigCPtr);
  }

  public void disable_seed_rand() {
    fanndoublePINVOKE.neural_net_disable_seed_rand(swigCPtr);
  }

  public void enable_seed_rand() {
    fanndoublePINVOKE.neural_net_enable_seed_rand(swigCPtr);
  }

  public SWIGTYPE_p_fann to_fann() {
    global::System.IntPtr cPtr = fanndoublePINVOKE.neural_net_to_fann(swigCPtr);
    SWIGTYPE_p_fann ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_fann(cPtr, false);
    return ret;
  }

  public void descale_output_(double[] descale_vector) {
    fanndoublePINVOKE.neural_net_descale_output_(swigCPtr, descale_vector);
  }

  public void descale_input_(double[] descale_vector) {
    fanndoublePINVOKE.neural_net_descale_input_(swigCPtr, descale_vector);
  }

}

}
