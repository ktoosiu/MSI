//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

using FANNCSharp;
namespace FannWrapperFixed {

class fannfixedPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="SWIGRegisterExceptionCallbacks_fannfixed")]
    public static extern void SWIGRegisterExceptionCallbacks_fannfixed(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="SWIGRegisterExceptionArgumentCallbacks_fannfixed")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_fannfixed(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_fannfixed(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_fannfixed(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  internal class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(fannfixedPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(fannfixedPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="SWIGRegisterStringCallback_fannfixed")]
    public static extern void SWIGRegisterStringCallback_fannfixed(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_fannfixed(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static fannfixedPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_FANNPRINTF_get")]
  public static extern string FANNPRINTF_get();

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_FANNSCANF_get")]
  public static extern string FANNSCANF_get();

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_fopen")]
  public static extern global::System.IntPtr fopen(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_fclose")]
  public static extern int fclose(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_new_uintArray")]
  public static extern global::System.IntPtr new_uintArray(int jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_delete_uintArray")]
  public static extern void delete_uintArray(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_uintArray_getitem")]
  public static extern uint uintArray_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_uintArray_setitem")]
  public static extern void uintArray_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_uintArray_cast")]
  public static extern global::System.IntPtr uintArray_cast(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_uintArray_frompointer")]
  public static extern global::System.IntPtr uintArray_frompointer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_new_ActivationFunctionArray")]
  public static extern global::System.IntPtr new_ActivationFunctionArray(int jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_delete_ActivationFunctionArray")]
  public static extern void delete_ActivationFunctionArray(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_ActivationFunctionArray_getitem")]
  public static extern int ActivationFunctionArray_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_ActivationFunctionArray_setitem")]
  public static extern void ActivationFunctionArray_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_ActivationFunctionArray_cast")]
  public static extern global::System.IntPtr ActivationFunctionArray_cast(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_ActivationFunctionArray_frompointer")]
  public static extern global::System.IntPtr ActivationFunctionArray_frompointer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_new_ConnectionArray")]
  public static extern global::System.IntPtr new_ConnectionArray(int jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_delete_ConnectionArray")]
  public static extern void delete_ConnectionArray(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_ConnectionArray_getitem")]
  public static extern global::System.IntPtr ConnectionArray_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_ConnectionArray_setitem")]
  public static extern void ConnectionArray_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_ConnectionArray_cast")]
  public static extern global::System.IntPtr ConnectionArray_cast(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_ConnectionArray_frompointer")]
  public static extern global::System.IntPtr ConnectionArray_frompointer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_Connection_from_neuron_set")]
  public static extern void Connection_from_neuron_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_Connection_from_neuron_get")]
  public static extern uint Connection_from_neuron_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_Connection_to_neuron_set")]
  public static extern void Connection_to_neuron_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_Connection_to_neuron_get")]
  public static extern uint Connection_to_neuron_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_Connection_weight_set")]
  public static extern void Connection_weight_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_Connection_weight_get")]
  public static extern int Connection_weight_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_new_Connection")]
  public static extern global::System.IntPtr new_Connection();

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_delete_Connection")]
  public static extern void delete_Connection(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_new_training_data__SWIG_0")]
  public static extern global::System.IntPtr new_training_data__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_new_training_data__SWIG_1")]
  public static extern global::System.IntPtr new_training_data__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_delete_training_data")]
  public static extern void delete_training_data(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_training_data_destroy_train")]
  public static extern void training_data_destroy_train(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_training_data_read_train_from_file")]
  public static extern bool training_data_read_train_from_file(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_training_data_save_train")]
  public static extern bool training_data_save_train(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_training_data_save_train_to_fixed")]
  public static extern bool training_data_save_train_to_fixed(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_training_data_shuffle_train_data")]
  public static extern void training_data_shuffle_train_data(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_training_data_merge_train_data")]
  public static extern void training_data_merge_train_data(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_training_data_length_train_data")]
  public static extern uint training_data_length_train_data(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_training_data_num_input_train_data")]
  public static extern uint training_data_num_input_train_data(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_training_data_num_output_train_data")]
  public static extern uint training_data_num_output_train_data(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_training_data_get_input")]
  public static extern global::System.IntPtr training_data_get_input(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_training_data_get_output")]
  public static extern global::System.IntPtr training_data_get_output(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_training_data_get_train_input")]
  public static extern global::System.IntPtr training_data_get_train_input(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_training_data_get_train_output")]
  public static extern global::System.IntPtr training_data_get_train_output(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_training_data_set_train_data__SWIG_0")]
  public static extern void training_data_set_train_data__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5, global::System.Runtime.InteropServices.HandleRef jarg6);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_training_data_set_train_data__SWIG_1")]
  public static extern void training_data_set_train_data__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]int[] jarg4, uint jarg5, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]int[] jarg6);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_training_data_create_train_from_callback")]
  public static extern void training_data_create_train_from_callback(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, uint jarg4, global::System.IntPtr jarg5);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_training_data_scale_input_train_data")]
  public static extern void training_data_scale_input_train_data(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_training_data_scale_output_train_data")]
  public static extern void training_data_scale_output_train_data(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_training_data_scale_train_data")]
  public static extern void training_data_scale_train_data(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_training_data_subset_train_data")]
  public static extern void training_data_subset_train_data(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_training_data_to_fann_train_data")]
  public static extern global::System.IntPtr training_data_to_fann_train_data(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_new_neural_net__SWIG_0")]
  public static extern global::System.IntPtr new_neural_net__SWIG_0(int jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_new_neural_net__SWIG_2")]
  public static extern global::System.IntPtr new_neural_net__SWIG_2(int jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_new_neural_net__SWIG_3")]
  public static extern global::System.IntPtr new_neural_net__SWIG_3(float jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_new_neural_net__SWIG_4")]
  public static extern global::System.IntPtr new_neural_net__SWIG_4(float jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_new_neural_net__SWIG_5")]
  public static extern global::System.IntPtr new_neural_net__SWIG_5(string jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_new_neural_net__SWIG_6")]
  public static extern global::System.IntPtr new_neural_net__SWIG_6(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_new_neural_net__SWIG_7")]
  public static extern global::System.IntPtr new_neural_net__SWIG_7(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_new_neural_net__SWIG_8")]
  public static extern global::System.IntPtr new_neural_net__SWIG_8();

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_copy_from_struct_fann")]
  public static extern void neural_net_copy_from_struct_fann(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_delete_neural_net")]
  public static extern void delete_neural_net(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_destroy")]
  public static extern void neural_net_destroy(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_create_standard")]
  public static extern bool neural_net_create_standard(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_create_standard_array")]
  public static extern bool neural_net_create_standard_array(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_create_sparse")]
  public static extern bool neural_net_create_sparse(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_create_sparse_array")]
  public static extern bool neural_net_create_sparse_array(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, uint jarg3, global::System.Runtime.InteropServices.HandleRef jarg4);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_create_shortcut")]
  public static extern bool neural_net_create_shortcut(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_create_shortcut_array")]
  public static extern bool neural_net_create_shortcut_array(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_run")]
  public static extern global::System.IntPtr neural_net_run(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]int[] jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_randomize_weights")]
  public static extern void neural_net_randomize_weights(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_init_weights")]
  public static extern void neural_net_init_weights(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_print_connections")]
  public static extern void neural_net_print_connections(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_create_from_file")]
  public static extern bool neural_net_create_from_file(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_save")]
  public static extern bool neural_net_save(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_save_to_fixed")]
  public static extern int neural_net_save_to_fixed(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_test")]
  public static extern global::System.IntPtr neural_net_test(global::System.Runtime.InteropServices.HandleRef jarg1, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]int[] jarg2, [global::System.Runtime.InteropServices.In, global::System.Runtime.InteropServices.MarshalAs(global::System.Runtime.InteropServices.UnmanagedType.LPArray)]int[] jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_test_data")]
  public static extern float neural_net_test_data(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_MSE")]
  public static extern float neural_net_get_MSE(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_reset_MSE")]
  public static extern void neural_net_reset_MSE(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_print_parameters")]
  public static extern void neural_net_print_parameters(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_training_algorithm")]
  public static extern int neural_net_get_training_algorithm(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_training_algorithm")]
  public static extern void neural_net_set_training_algorithm(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_learning_rate")]
  public static extern float neural_net_get_learning_rate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_learning_rate")]
  public static extern void neural_net_set_learning_rate(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_activation_function")]
  public static extern int neural_net_get_activation_function(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_activation_function")]
  public static extern void neural_net_set_activation_function(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_activation_function_layer")]
  public static extern void neural_net_set_activation_function_layer(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_activation_function_hidden")]
  public static extern void neural_net_set_activation_function_hidden(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_activation_function_output")]
  public static extern void neural_net_set_activation_function_output(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_activation_steepness")]
  public static extern int neural_net_get_activation_steepness(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_activation_steepness")]
  public static extern void neural_net_set_activation_steepness(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_activation_steepness_layer")]
  public static extern void neural_net_set_activation_steepness_layer(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_activation_steepness_hidden")]
  public static extern void neural_net_set_activation_steepness_hidden(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_activation_steepness_output")]
  public static extern void neural_net_set_activation_steepness_output(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_train_error_function")]
  public static extern int neural_net_get_train_error_function(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_train_error_function")]
  public static extern void neural_net_set_train_error_function(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_quickprop_decay")]
  public static extern float neural_net_get_quickprop_decay(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_quickprop_decay")]
  public static extern void neural_net_set_quickprop_decay(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_quickprop_mu")]
  public static extern float neural_net_get_quickprop_mu(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_quickprop_mu")]
  public static extern void neural_net_set_quickprop_mu(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_rprop_increase_factor")]
  public static extern float neural_net_get_rprop_increase_factor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_rprop_increase_factor")]
  public static extern void neural_net_set_rprop_increase_factor(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_rprop_decrease_factor")]
  public static extern float neural_net_get_rprop_decrease_factor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_rprop_decrease_factor")]
  public static extern void neural_net_set_rprop_decrease_factor(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_rprop_delta_zero")]
  public static extern float neural_net_get_rprop_delta_zero(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_rprop_delta_zero")]
  public static extern void neural_net_set_rprop_delta_zero(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_rprop_delta_min")]
  public static extern float neural_net_get_rprop_delta_min(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_rprop_delta_min")]
  public static extern void neural_net_set_rprop_delta_min(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_rprop_delta_max")]
  public static extern float neural_net_get_rprop_delta_max(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_rprop_delta_max")]
  public static extern void neural_net_set_rprop_delta_max(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_sarprop_weight_decay_shift")]
  public static extern float neural_net_get_sarprop_weight_decay_shift(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_sarprop_weight_decay_shift")]
  public static extern void neural_net_set_sarprop_weight_decay_shift(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_sarprop_step_error_threshold_factor")]
  public static extern float neural_net_get_sarprop_step_error_threshold_factor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_sarprop_step_error_threshold_factor")]
  public static extern void neural_net_set_sarprop_step_error_threshold_factor(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_sarprop_step_error_shift")]
  public static extern float neural_net_get_sarprop_step_error_shift(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_sarprop_step_error_shift")]
  public static extern void neural_net_set_sarprop_step_error_shift(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_sarprop_temperature")]
  public static extern float neural_net_get_sarprop_temperature(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_sarprop_temperature")]
  public static extern void neural_net_set_sarprop_temperature(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_num_input")]
  public static extern uint neural_net_get_num_input(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_num_output")]
  public static extern uint neural_net_get_num_output(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_total_neurons")]
  public static extern uint neural_net_get_total_neurons(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_total_connections")]
  public static extern uint neural_net_get_total_connections(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_decimal_point")]
  public static extern uint neural_net_get_decimal_point(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_multiplier")]
  public static extern uint neural_net_get_multiplier(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_network_type")]
  public static extern int neural_net_get_network_type(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_connection_rate")]
  public static extern float neural_net_get_connection_rate(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_num_layers")]
  public static extern uint neural_net_get_num_layers(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_layer_array")]
  public static extern void neural_net_get_layer_array(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_bias_array")]
  public static extern void neural_net_get_bias_array(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_connection_array")]
  public static extern void neural_net_get_connection_array(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_weight_array")]
  public static extern void neural_net_set_weight_array(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_weight")]
  public static extern void neural_net_set_weight(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2, uint jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_learning_momentum")]
  public static extern float neural_net_get_learning_momentum(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_learning_momentum")]
  public static extern void neural_net_set_learning_momentum(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_train_stop_function")]
  public static extern int neural_net_get_train_stop_function(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_train_stop_function")]
  public static extern void neural_net_set_train_stop_function(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_bit_fail_limit")]
  public static extern int neural_net_get_bit_fail_limit(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_bit_fail_limit")]
  public static extern void neural_net_set_bit_fail_limit(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_bit_fail")]
  public static extern uint neural_net_get_bit_fail(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_set_error_log")]
  public static extern void neural_net_set_error_log(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_errno")]
  public static extern uint neural_net_get_errno(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_reset_errno")]
  public static extern void neural_net_reset_errno(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_reset_errstr")]
  public static extern void neural_net_reset_errstr(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_get_errstr")]
  public static extern string neural_net_get_errstr(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_print_error")]
  public static extern void neural_net_print_error(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_disable_seed_rand")]
  public static extern void neural_net_disable_seed_rand(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_enable_seed_rand")]
  public static extern void neural_net_enable_seed_rand(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_neural_net_to_fann")]
  public static extern global::System.IntPtr neural_net_to_fann(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_new_intArray")]
  public static extern global::System.IntPtr new_intArray(int jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_delete_intArray")]
  public static extern void delete_intArray(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_intArray_getitem")]
  public static extern int intArray_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_intArray_setitem")]
  public static extern void intArray_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_intArray_cast")]
  public static extern global::System.IntPtr intArray_cast(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_intArray_frompointer")]
  public static extern global::System.IntPtr intArray_frompointer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_new_intArrayArray")]
  public static extern global::System.IntPtr new_intArrayArray(int jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_delete_intArrayArray")]
  public static extern void delete_intArrayArray(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_intArrayArray_getitem")]
  public static extern global::System.IntPtr intArrayArray_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_intArrayArray_setitem")]
  public static extern void intArrayArray_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_intArrayArray_cast")]
  public static extern global::System.IntPtr intArrayArray_cast(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_intArrayArray_frompointer")]
  public static extern global::System.IntPtr intArrayArray_frompointer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_IntAccessor_Get")]
  public static extern int IntAccessor_Get(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_IntAccessor_FromPointer")]
  public static extern global::System.IntPtr IntAccessor_FromPointer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_IntAccessor_Cast")]
  public static extern global::System.IntPtr IntAccessor_Cast(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_new_IntAccessor")]
  public static extern global::System.IntPtr new_IntAccessor();

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_delete_IntAccessor")]
  public static extern void delete_IntAccessor(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_IntArrayAccessor_Get__SWIG_0")]
  public static extern global::System.IntPtr IntArrayAccessor_Get__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_IntArrayAccessor_Get__SWIG_1")]
  public static extern int IntArrayAccessor_Get__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_IntArrayAccessor_FromPointer")]
  public static extern global::System.IntPtr IntArrayAccessor_FromPointer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_IntArrayAccessor_Cast")]
  public static extern global::System.IntPtr IntArrayAccessor_Cast(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_new_IntArrayAccessor")]
  public static extern global::System.IntPtr new_IntArrayAccessor();

  [global::System.Runtime.InteropServices.DllImport(dllnames.fixedDLLName, EntryPoint="CSharp_delete_IntArrayAccessor")]
  public static extern void delete_IntArrayAccessor(global::System.Runtime.InteropServices.HandleRef jarg1);
}

}
